#!/usr/bin/env bash

: ${JUST_DIR="$(dirname "${BASH_SOURCE[0]}")/"}
source "${JUST_DIR}/file_tools.bsh"

#****F* vsi/linux_accounts.bsh
# NAME
#   linux_accounts.bsh - Functions for manipulating linux user/groups
# NOTES
#   Works on tested (all?) versions CentOS, Ubuntu, Debian, Fedora, Alpine,
#   BusyBox, CirrOS, Amazon Linux, and Clear Linux
# BUGS
#   On operating systems like Clear Linux, (and other more complicated setups
#   like LDAP/NIS/etc...) where the user/group lists come from multiple places,
#   the non-duplication code may not work as expected. This could be worked
#   around by setting they passwd/etc... arrays yourself before calling
#   add_user/add_group, but this too may not be the desired outcome.
#
#   - Arrays with the first element unset may have unpredictable behavior
#   - If the passwd file exists and the shadow does not, it will not be detected
#   - If the group file exists and the ghshdow does not, it will not be detected
# AUTHOR
#   Andy Neff
#***

#****f* linux_accounts.bsh/read_file
# NAME
#   read_file - Read contents of /etc/passwd or similar files into an array
# INPUTS
#   $1 - Filename
#   $2 - array_name
# OUTPUT
#   ${!2[@]} - Array of contents of the file; one line per element
# NOTE
#   This is designed to work on newline separated files like /etc/passwd,
#   /etc/group, etc...
# AUTHOR
#   Andy Neff
#***
function read_file()
{
  # Make newlines the only array separator
  local IFS=$'\n'
  #Disable glob expansion
  local GLOBIGNORE='*'
  local line

  #Read file into array
  #CONTENT=($(<${1}))

  #Clear array
  unset $2

  if [ -e "${1}" ]; then
    #Loop var
    declare -i i=0
    while IFS='' read -r line || [[ -n "${line}" ]]; do
      read -r "${2}[$i]" <<< "$line"
      i+=1
    done < "${1}"
  fi
}

#****f* linux_accounts.bsh/write_file
# NAME
#   write_file - Write contents /etc/passwd or similar from an array
# INPUTS
#   $1 - Filename
#   $2... - Lines to write
# NOTE
#   This is designed to work on newline separated files like /etc/passwd,
#   /etc/group, etc...
# AUTHOR
#   Andy Neff
#***
function write_file()
{
  local IFS=$'\n'
  local GLOBIGNORE='*'
  local filename="${1}"
  shift 1
  echo "${*}" > "${filename}"
}

#****f* linux_accounts.bsh/add_user
# NAME
#   add_user - Adds a new user to the OS
# INPUTS
#   $1 - User name
#   [$2] - UID. Default: 1000
#   [$3] - GID. Default: 1000
#   [$4] - User home (defaults to /home/$1)
#   [passwd] - List of passwd lines. Auto loaded if not defined
#   [shadow] - List of shadow lines. Auto loaded if not defined and it exists
#   [LINUX_ACCOUNTS_AUTOSAVE] - Auto writes out passwd/shadow file. Default: 1
# NOTES
#   Will write a new passwd to /etc/passwd. If it is determined that the OS uses
#   /etc/shadow too, then that will be written to also.
# AUTHOR
#   Andy Neff
#***
function add_user()
{
  #Read in the passwd array if it doesn't exist already
  if ! declare -p passwd&>/dev/null; then
    local passwd
    read_file /etc/passwd passwd
  fi

  # The second test is for OS's like clearlinux which contain no user/group files
  # until after an additional user/group is created.
  if [ -e /etc/shadow ] || ( [ ! -e /etc/passwd ] && getent shadow &>/dev/null ); then
    #Read in the shadow array if it doesn't exist already
    if ! declare -p shadow &>/dev/null; then
      local shadow
      read_file /etc/shadow shadow
    fi

    #Add the user
    add_to_passwd "$1" x "${2-1000}" "${3-1000}" "${4-/home/$1}"
    add_to_shadow "$1" '*'
  else
    #Add the user
    add_to_passwd "$1" '*' "${2-1000}" "${3-1000}" "${4-/home/$1}"
  fi

  if [ "${LINUX_ACCOUNTS_AUTOSAVE-1}" == "1" ]; then
    write_user_data
  fi
}


#****f* linux_accounts.bsh/add_to_passwd
# NAME
#   add_to_passwd - Adds entry to passwd array
# INPUTS
#   $1 - User name
#   [$2] - Encrypted password (x for none). Default: x
#   [$3] - UID. Default: 1000
#   [$4] - GID. Default: 1000
#   [$5] - User home: Default: /home/$1
#   [$6] - Default shell. Default: bash or sh
#   passwd - List of passwd lines
# NOTES
#   If the username already exists, it is replaced.
# BUGS
#   I imagine bad things would happen if you "add_to_passwd root"
# AUTHOR
#   Andy Neff
#***
function add_to_passwd()
{
  local IFS=:
  local user_info
  local i

  local new_passwd="$1:${2-x}:${3-1000}:${4-1000}::${5-/home/$1}:${6-$(command -v bash || command -v sh)}"

  for i in "${!passwd[@]}"; do
    #User Name[0], x[1], UID[2], GID[3], FullName,RoomNumber,WorkPhone,HomePhone,Other[4], Home Dir[5], Shell[6]
    user_info=(${passwd[$i]})

    #If name already exists, replace it
    if [ "${user_info[0]}" == "$1" ]; then
      passwd[$i]="${new_passwd}"
      return
    fi
  done
  passwd=("${new_passwd}"
          ${passwd+"${passwd[@]}"} )
}

#****f* linux_accounts.bsh/add_to_shadow
# NAME
#   add_to_shadow - Adds entry to shadow array
# INPUTS
#   $1 - User name
#   $2 - Encrypted password (* for none)
# AUTHOR
#   Andy Neff
#***
function add_to_shadow()
{
  local IFS=:
  local user_info
  local i

  local new_shadow="${1}:${2}:$(($(date +%s)/3600/24)):99999:7:::"

  for i in "${!shadow[@]}"; do
    #User Name[0], x[1], UID[2], GID[3], FullName,RoomNumber,WorkPhone,HomePhone,Other[4], Home Dir[5], Shell[6]
    user_info=(${shadow[$i]})

    #If name already exists, replace it
    if [ "${user_info[0]}" == "$1" ]; then
      shadow[$i]="${new_shadow}"
      return
    fi
  done
  shadow=("${new_shadow}"
          ${shadow+"${shadow[@]}"} )
}

#****f* linux_accounts.bsh/read_user_data
# NAME
#   read_user_data - Helper function to read passwd/shadow
# OUTPUT
#   passwd - Array of passwd entries
#   shadow - Array of shadow entries. Undefined if shadow does not exist
# AUTHOR
#   Andy Neff
#***
function read_user_data()
{
  read_file /etc/passwd passwd
  read_file /etc/shadow shadow
}

#****f* linux_accounts.bsh/write_user_data
# NAME
#   write_user_data - Helper function to write passwd/shadow
# INPUTS
#   passwd - Array of passwd entries
#   [shadow] - Array of shadow entries. If undefined, shadow is not written
# AUTHOR
#   Andy Neff
#***
function write_user_data()
{
  write_file /etc/passwd ${passwd+"${passwd[@]}"}
  if [ "${shadow+set}" == "set" ]; then
    write_file /etc/shadow ${shadow+"${shadow[@]}"}
  fi
}

#****f* linux_accounts.bsh/add_group
# NAME
#   add_group - Adds a new group to the OS
# INPUTS
#   $1 - Group name
#   $2 - GID
#   groups - List of group lines
#   [users] - List of users to add to the group
#   [suffix] - Suffix to add to group_name if there is a name clash. For internal use
#   [LINUX_ACCOUNTS_AUTOSAVE] - Auto writes out group/gshadow file. Default: 1
#   [fifo_buffer] - A FIFO buffer used for capturing stdout. This is an advanced
#                   feature used only to speed up adding multiple groups
# NOTES
#   Will write a new group to /etc/group. If it is determined that the OS uses
#   /etc/gshadow too, then that will be written to also.
# AUTHOR
#   Andy Neff
#***
function add_group()
{
  local group_name
  #Read in the group array if it doesn't exist already
  if ! declare -p group&>/dev/null; then
    local group
    read_file /etc/group group
  fi

  # The second test is for OS's like clearlinux which contain no user/group files
  # until after an additional user/group is created.
  if [ -e /etc/gshadow ] || ( [ ! -e /etc/group ] && getent gshadow &>/dev/null ); then
    #Read in the gshadow array if it doesn't exist already
    if ! declare -p gshadow&>/dev/null; then
      local gshadow
      read_file /etc/gshadow gshadow
    fi

    local fd_r
    local fd_w
    : ${fifo_buffer="$(mktemp -u)"}
    open_fd -s -p -n "${fifo_buffer}"

    # Create a new group, and redirect stdout to
    add_to_group "$1" "$2" 'x' >&${fd_w}
    # Read from fd ${fd} into group_name
    read -u${fd_r} group_name

    close_fd ${fd_w}

    # Add gshadow entry
    add_to_gshadow ${group_name} '!'

    # Delete that fifo buffer after one use
    if [ "${delete_buffer-}" == "1" ]; then
      rm "${fifo_buffer}"
    fi
  else
    # Just add a group, discard echoed name
    add_to_group "$1" "$2" 'x' > /dev/null
  fi

  if [ "${LINUX_ACCOUNTS_AUTOSAVE-1}" == "1" ]; then
    write_group_data
  fi
}

#****f* linux_accounts.bsh/read_group_data
# NAME
#   read_group_data - Helper function to read group/gshadow
# OUTPUT
#   group - Array of groups
#   gshadow - Array of gshadow entries. Undefined if gshadow does not exist
# AUTHOR
#   Andy Neff
#***
function read_group_data()
{
  read_file /etc/group group
  read_file /etc/gshadow gshadow
}

#****f* linux_accounts.bsh/write_group_data
# NAME
#   write_group_data - Helper function to write group/gshadow
# INPUTS
#   group - Array of groups
#   gshadow - Array of gshadow entries. If undefined, gshadow is not written
# AUTHOR
#   Andy Neff
#***
function write_group_data()
{
  write_file /etc/group ${group+"${group[@]}"}
  if declare -p gshadow &>/dev/null; then
    write_file /etc/gshadow ${gshadow+"${gshadow[@]}"}
  fi
}

#****f* linux_accounts.bsh/add_to_group
# NAME
#   add_to_group - Adds entry to group array
# INPUTS
#   $1 - Group name
#   $2 - GID
#   [$3] - Encrypted password. Defaults to "x" (disabled)
#   group - List of group lines
#   [users] - List of users to add to the group
#   [suffix] - Suffix to add to group_name if there is a name clash. For internal use
# OUTPUT
#   stdin - group name used
# NOTES
#   Works on Debian, Centos, Alpine, etc... Only odd Linuxes with more than 4
#   columns in /etc/group will fail.
# AUTHOR
#   Andy Neff
#***
function add_to_group()
{
  local IFS=:
  local group_name=${1}${suffix-}

  local group_info
  local i

  for i in "${!group[@]}"; do
    #Group Name[0], password[1], GID[2], comma separates user list[3]
    group_info=(${group[$i]})

    #If name already existed
    if [ "${group_info[0]}" == "${group_name}" ]; then
      #and if the id is the same
      if [ "${group_info[2]}" == "${2}" ]; then
        #Just modify the line
        if [ "${#group_info}" == "3" ]; then
          group_info[4]=${users-}
        else
          group_info[4]=${group_info[4]-}${users:+,${users-}}
        fi
        group[$i]="${group_info[*]}"
        echo ${group_info[0]}
        return
      fi
      #try again with a different suffix
      suffix=$((${suffix-0}+1)) add_to_group "${@}"
      return
    fi
  done
  echo "${group_name}"
  #Add as first. Many OSes have a special group in the last spot, +:::
  #It's common to add as the second last sometimes, but first is easier
  group=("${group_name}:${3-x}:${2}:${users-}"
         ${group+"${group[@]}"} )
}

#****f* linux_accounts.bsh/add_to_gshadow
# NAME
#   add_to_gshadow - Adds entry to gshadow array
# INPUTS
#   $1 - Group name
#   [$2] - Encrypted password (! or * for none). Default: !
#   [users] - List of users to add to the entry
# AUTHOR
#   Andy Neff
#***
function add_to_gshadow()
{
  local IFS=:
  local group_info
  local i

  local new_gshadow="${1}:${2-!}::${users-}"

  for i in "${!gshadow[@]}"; do
    #Group Name[0], password[1], admins[2], members[3]
    group_info=(${gshadow[$i]})

    #If name already exists, replace it
    if [ "${group_info[0]}" == "$1" ]; then
      gshadow[$i]="${new_gshadow}"
      return
    fi
  done
  gshadow=("${new_gshadow}"
           ${gshadow+"${gshadow[@]}"} )
}
