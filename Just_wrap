#!/usr/bin/env bash

#****F* just/Just_wrap
# NAME
#   Just_wrap - Wrap files to create just environment
# USAGE
#   Just_wrap is typically used to write a one line (but long line) script. This
#   wrap script is then used every time you want to use your project environment
#
#   There are a total of four ways to use this wrap script.
#   - Calling a command in your project environment. e.g.: "./wrap ls"
#   - exec-ing a command in your project environment. This correctly results in
#     no children processes. The exception to this is when you use built in bash
#     commands (i.e. declare), in which case the child is not exec-ed.
#     For example: "exec ./wrap ls"
#   - Sourcing your environment into your current environment. e.g.: ". ./wrap"
#   - Run a new bash shell session and have your project environment in the new
#     session. For example: "./wrap" with no arguments.
# INPUTS
#   $1 - The project environment filename. Argument to source_environment_files
#   [JUST_WRAP_NO_PS1] - When running a new bash shell, PS1 is exported to have
#                        (just) in it to let you know you are in the shell. To
#                        disable this behavior, set JUST_WRAP_NO_PS1 to 1.
#                        Default: 0
# EXAMPLE
#   If you have a ./wrap script in your main project repository, and for
#   example, have the vsi_common submodule checked out in ./external/vsi_common,
#   your wrap script would look something like this:
#
#   #!/usr/bin/env bash
#   . "$(dirname "${BASH_SOURCE[0]}")"/external/vsi_common/Just_wrap "${BASH_SOURCE[0]}" my_project.env ${@+"${@}"}
#
#   where my_project.env is the main project settings file.
# AUTHOR
#   Andy Neff
#***

   # Make sure set -eu doesn't fail      if Just_wrap is wrapped and not being sourced
if ( ( [ ${#BASH_SOURCE[@]} -gt 1 ] && [ "${BASH_SOURCE[1]}" == "${0}" ] ) || \
   # Or not being wrapped              and Just_wrap is not being sourced
     ( [ ${#BASH_SOURCE[@]} == 1 ] && [ "${BASH_SOURCE[0]}" == "${0}" ] ) ) && \
   # With no argument (other than the environment variable)
   [ "$#" -le "1" ]; then

  if [ "${JUST_WRAP_NO_PS1-}" != "1" ]; then
    export PS1="(just)[\u@\h \W]\$ "
    unset PROMPT_COMMAND
  fi

  # If Just_wrap was called directly
  if [ "${#BASH_SOURCE[@]}" == "1" ]; then
    # Source this script and the env file with it.
    rc_file_line="source '${0}' '${1}'"
  else
    # The wrapped script does not need to have the environment file passed back
    # to it, ${0} will point to that script, which will still have the
    # environment argument in it
    rc_file_line="source '${0}'"
  fi

  # Thanks bash for making this hard! https://unix.stackexchange.com/q/187369
  if [[ ${OSTYPE} == darwin* ]]; then
    exec bash --rcfile <(echo "${rc_file_line}")
  else
    ENV=<(echo "set +o posix; ${rc_file_line}") exec bash --posix
  fi
fi

#Source the environment
: ${JUST_DIR="$(dirname "${BASH_SOURCE[0]}")/"}
. "${JUST_DIR}/env.bsh"
. "${JUST_DIR}/just_functions.bsh"
. "${JUST_DIR}/common_source.sh"
source_environment_files "${1}"
shift 1 # Toss that argument away, you're done with it

#This works as long as you don't name this script 'bash'... SO DON'T CALL YOUR SCIPT BASH!!!
#If main wrapper script was not source
if ( [ ${#BASH_SOURCE[@]} -gt 1 ] && [ "${BASH_SOURCE[1]}" == "${0}" ] ) || \
  # Or if there is no main wrapper script, and this script was not source
   ( [ "${#BASH_SOURCE[@]}" == "1" ] && [ "${BASH_SOURCE[0]}" == "${0}" ] ); then
  #Then execute the arguments!
  if [ "$(type -t "$1")" == "file" ] || [ "$(type -t "$1")" == "alias" ]; then
    exec "${@}"
  fi
  "${@}"
fi
