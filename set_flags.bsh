#!/usr/bin/false

#****F* vsi/set_flags.bsh
# NAME
#   set_flags.bsh - Functions to make settings/clearing bash flags easy
# DESCRIPTION
#   Sometimes a flag needs to be set locally for a piece of code, and should be
#   reset if and only if it wasn't set before. These function do remember the
#   original state so that it can be reset with a simple call
# EXAMPLE
#   set_flag u
#   # <code here>
#   reset_flag u
#
#   set_flag e
#   unset_flag E
#   set_flags xv
#   # <code here>
#   reset_flags
# SEE ALSO
#   set_flags.bsh/set_flag set_flags.bsh/unset_flag set_flags.bsh/reset_flag
#   set_flags.bsh/set_flags set_flags.bsh/unset_flags set_flags.bsh/reset_flags
#   set_flags.bsh/set_optflag set_flags.bsh/unset_optflag set_flags.bsh/reset_optflag
#   set_flags.bsh/set_optflags set_flags.bsh/unset_optflags set_flags.bsh/reset_optflags
#   set_flags.bsh/set_oflag set_flags.bsh/unset_oflag set_flags.bsh/reset_oflag
#   set_flags.bsh/set_oflags set_flags.bsh/unset_oflags set_flags.bsh/reset_oflags
# AUTHOR
#   Andy Neff
#***

: ${JUST_DIR="$(\dirname "${BASH_SOURCE[0]}")/"}
source "${JUST_DIR}/isin"

#            _                         _
#   ___  ___| |_   __   _____ _ __ ___(_) ___  _ __
#  / __|/ _ \ __|  \ \ / / _ \ '__/ __| |/ _ \| '_ \
#  \__ \  __/ |_    \ V /  __/ |  \__ \ | (_) | | | |
#  |___/\___|\__|    \_/ \___|_|  |___/_|\___/|_| |_|

#****if* set_flags.bsh/_save_flag
# NAME
#   _save_flag - Saves the previous state of a flag
# INPUTS
#   $1 - Single letter flag to save
# OUTPUT
#   Stores original state in VSI_COMMON_SET_FLAG_<flag>.
# NOTES
#   The original state is smart enough to not be overridden by multiple calls
#   to set_flag/unset_flag. The original state means the state before ALL
#   set_flag and unset_flags were made. And is remembered until reset_flag is
#   called.
# AUTHOR
#   Andy Neff
#***
function _save_flag()
{
  local flag="VSI_COMMON_SET_FLAG_$1"

  if [ "${!flag+set}" != "set" ]; then
    if [[ $- =~ $1 ]]; then
      export "VSI_COMMON_SET_FLAG_$1"=1
    else
      export "VSI_COMMON_SET_FLAG_$1"=0
    fi
  fi
}

#****f* set_flags.bsh/set_flag
# NAME
#   set_flag - Turns on a bash options, remember the previous state
# INPUTS
#   $1 - Single letter flag to set
# OUTPUT
#   Stores original state in VSI_COMMON_SET_FLAG_<flag>.
# NOTES
#   The original state is smart enough to not be overridden by multiple calls
#   to set_flag/unset_flag. The original state means the state before ALL
#   set_flag and unset_flags were made. And is remembered until reset_flag is
#   called.
# BUGS
#   Doesn't support o flag. The only options that are not duplicated are:
#   vi, emacs, history, pipefail, and posix. Only pipefail and posix would be
#   of interest, and are stored in SHELLOPTS.
# AUTHOR
#   Andy Neff
#***
function set_flag()
{
  _save_flag "$1"
  set "-$1"
}

#****f* set_flags.bsh/unset_flag
# NAME
#   unset_flag - Same as set_flag, but unsets the flag
#***
function unset_flag()
{
  _save_flag "$1"
  set "+$1"
}

#****f* set_flags.bsh/reset_flag
# NAME
#   reset_flag - Resets the flag to the previous state
# DESCRIPTION
#   Sets (or unsets) the flag to the state before the very first call to
#   set_flag/unset_flag. Also clears the variable VSI_COMMON_SET_FLAG_<flag>
# AUTHOR
#   Andy Neff
#***
function reset_flag()
{
  local flag="VSI_COMMON_SET_FLAG_$1"
  if [ "${!flag+set}" == "set" ]; then
    if [ "${!flag}" == "1" ]; then
      set "-${1}"
    else
      set "+${1}"
    fi
    unset "${flag}"
  fi
}

#****f* set_flags.bsh/set_flags
# NAME
#   set_flags - Multiple flags at once version of set_flag
# INPUTS
#   $1 - Multiple letters allow
#***
function set_flags()
{
  local i
  for (( i=0; i<${#1}; i++ )); do
    set_flag "${1:$i:1}"
  done
}

#****f* set_flags.bsh/unset_flags
# NAME
#   unset_flags - Same as set_flags, but unsets multiple flags
#***
function unset_flags()
{
  local i
  for (( i=0; i<${#1}; i++ )); do
    unset_flag "${1:$i:1}"
  done
}

#****f* set_flags.bsh/reset_flags
# NAME
#   reset_flags - Multiple flags at once version of reset_flag
# NOTES
#   If no arguments are given, all flags are reset
#***
function reset_flags()
{
  local flag
  local i

  if (( $# )); then
    for (( i=0; i<${#1}; i++ )); do
      reset_flag "${1:$i:1}"
    done
  else
    for flag in $(\compgen -A variable | \grep ^VSI_COMMON_SET_FLAG_); do
      reset_flag "${flag#VSI_COMMON_SET_FLAG_}"
    done
  fi
}

#       _                 _                         _
#   ___| |__   ___  _ __ | |_   __   _____ _ __ ___(_) ___  _ __
#  / __| '_ \ / _ \| '_ \| __|  \ \ / / _ \ '__/ __| |/ _ \| '_ \
#  \__ \ | | | (_) | |_) | |_    \ V /  __/ |  \__ \ | (_) | | | |
#  |___/_| |_|\___/| .__/ \__|    \_/ \___|_|  |___/_|\___/|_| |_|
#                  |_|

#****f* set_flags.bsh/_save_optflag
# NAME
#   _save_optflag - shopt version of _save_flag
# OUTPUT
#   Stores original state in VSI_COMMON_SET_OPTFLAG_<flag>.
#***
function _save_optflag()
{
  local flag="VSI_COMMON_SET_OPTFLAG_$1"

  if [ "${!flag+set}" != "set" ]; then
    if shopt -q "$1"; then
      export "VSI_COMMON_SET_OPTFLAG_$1"=1
    else
      export "VSI_COMMON_SET_OPTFLAG_$1"=0
    fi
  fi
}

#****f* set_flags.bsh/set_optflag
# NAME
#   set_optflag - shopt version of set_flag
#***
function set_optflag()
{
  _save_optflag "$1"
  shopt -s "$1"
}

#****f* set_flags.bsh/unset_optflag
# NAME
#   unset_optflag - shopt version of unset_flag
#***
function unset_optflag()
{
  _save_optflag "$1"
  shopt -u "$1"
}

#****f* set_flags.bsh/reset_optflag
# NAME
#   reset_optflag - shopt version of reset_flag
#***
function reset_optflag()
{
  local flag="VSI_COMMON_SET_OPTFLAG_$1"
  if [ "${!flag+set}" == "set" ]; then
    if [ "${!flag}" == "1" ]; then
      shopt -s "${1}"
    else
      shopt -u "${1}"
    fi
    unset "${flag}"
  fi
}

#****f* set_flags.bsh/set_optflags
# NAME
#   set_optflags - Multiple flags at once version of set_optflag
# INPUTS
#   $1[...] - Multiple arguments allow
#***
function set_optflags()
{
  local i
  for i in "${@}"; do
    set_optflag "${i}"
  done
}

#****f* set_flags.bsh/unset_optflags
# NAME
#   unset_optflags - Same as set_optflags, but unsets multiple opt flags
#***
function unset_optflags()
{
  local i
  for i in "${@}"; do
    unset_optflag "${i}"
  done
}

#****f* set_flags.bsh/reset_optflags
# NAME
#   reset_optflags - Multiple flags at once version of reset_optflag
# NOTES
#   If no arguments are given, all opt flags are reset
#***
function reset_optflags()
{
  local flag
  local i

  if (( $# )); then
    for i in "${@}"; do
      reset_optflag "${i}"
    done
  else
    for flag in $(\compgen -A variable | \grep ^VSI_COMMON_SET_OPTFLAG_); do
      reset_optflag "${flag#VSI_COMMON_SET_OPTFLAG_}"
    done
  fi
}

#            _                                      _
#   ___  ___| |_         ___    __   _____ _ __ ___(_) ___  _ __
#  / __|/ _ \ __|  ___  / _ \   \ \ / / _ \ '__/ __| |/ _ \| '_ \
#  \__ \  __/ |_  |___|| (_) |   \ V /  __/ |  \__ \ | (_) | | | |
#  |___/\___|\__|       \___/     \_/ \___|_|  |___/_|\___/|_| |_|

#****f* set_flags.bsh/_save_oflag
# NAME
#   _save_oflag - set -o version of _save_flag
# OUTPUT
#   Stores original state in VSI_COMMON_SET_OFLAG_<flag>.
# BUGS
#   Since so many of the set flags overlap with "set -o" flags, these two
#   features should not be mixed together and used simultaneously. The only
#   exceptions are the "set -o" flags with no equivalent single letter
#   representation, mainly pipefail and posix
#***
function _save_oflag()
{
  local flag="VSI_COMMON_SET_OFLAG_$1"

  if [ "${!flag+set}" != "set" ]; then
    if (IFS=:; x=(${SHELLOPTS}); declare -p x; isin "${1}" "${x[@]}") then
      export "VSI_COMMON_SET_OFLAG_$1"=1
    else
      export "VSI_COMMON_SET_OFLAG_$1"=0
    fi
  fi
}

#****f* set_flags.bsh/set_oflag
# NAME
#   set_oflag - set -o version of set_flag
#***
function set_oflag()
{
  _save_oflag "$1"
  set -o "$1"
}

#****f* set_flags.bsh/unset_oflag
# NAME
#   unset_oflag - set -o version of unset_flag
#***
function unset_oflag()
{
  _save_oflag "$1"
  set +o "$1"
}

#****f* set_flags.bsh/reset_oflag
# NAME
#   reset_oflag - set -o version of reset_flag
# BUGS
#   Resetting certain flags does not return everything to status quo. For
#   example, setting vi mode, and then resetting does not restore emacs mode.
#   This is the only known bug, and in not important from a scripting point of
#   view.
# AUTHOR
#   Andy Neff
#***
function reset_oflag()
{
  local flag="VSI_COMMON_SET_OFLAG_$1"
  if [ "${!flag+set}" == "set" ]; then
    if [ "${!flag}" == "1" ]; then
      set -o "$1"
    else
      set +o "$1"
    fi
    unset "${flag}"
  fi
}

#****f* set_flags.bsh/set_oflags
# NAME
#   set_oflags - Multiple flags at once version of set_oflag
# INPUTS
#   $1[...] - Multiple arguments allow
#***
function set_oflags()
{
  local i
  for i in "${@}"; do
    set_oflag "${i}"
  done
}

#****f* set_flags.bsh/unset_oflags
# NAME
#   unset_oflags - Same as set_oflags, but unsets multiple opt flags
#***
function unset_oflags()
{
  local i
  for i in "${@}"; do
    unset_oflag "${i}"
  done
}

#****f* set_flags.bsh/reset_oflags
# NAME
#   reset_oflags - Multiple flags at once version of reset_oflag
# NOTES
#   If no arguments are given, all opt flags are reset
#***
function reset_oflags()
{
  local flag
  local i

  if (( $# )); then
    for i in "${@}"; do
      reset_oflag "${i}"
    done
  else
    for flag in $(\compgen -A variable | \grep ^VSI_COMMON_SET_OFLAG_); do
      reset_oflag "${flag#VSI_COMMON_SET_OFLAG_}"
    done
  fi
}