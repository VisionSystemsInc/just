#!/usr/bin/env false
# Source this file

#****F* vsi/elements.bsh
# NAME
#   elements.bsh - Set of -euE safe functions to make bash array manipulation easy
# SYNOPSIS
#   Set of functions for deleting, pre-pending and appending without repetition.
#   Versions using actual Bash arrays are suffixed with an _a, else it works on
#   delimiter (IFS) separated string
#
#   Most of these functions use variable indirection when possible to make using
#   them friendlier
# BUGS
#   Don't use arrays element_array variable
#   - __element_array_target_a
#   - __element_array_target_a2
#   - __element_array_target_s
#   - __element_array_target_s2
#   - __element_array_target_d
#   as the target. It will cause name collision
# NOTES
#   Not intended for POSIX sh
#***

: ${JUST_DIR="$(dirname "${BASH_SOURCE[0]}")/"}
source "${JUST_DIR}/set_flags.bsh"

#****f* elements.bsh/dynamic_set_a
# NAME
#   dynamic_set_a - Dynamically set an array to values from arguments
# INPUTS
#   $1 - Name of array to be set
#   [$2...] - Values to set
# EXAMPLE
#   dynamic_set_a my_array_name 11 "2 2" 33
#   # Is like executing
#   # my_array_name=(11 "2 2" 33)
# NOTES
#   Does not clear the array named by $1. So if the array had 4 elements in it
#   and dynamic_set_a is called with 3 elements, the 4th  element is still set
#
#   This is not a bug, but by design. "unset" the array prior to calling
#   dynamic_set_a if you wish to avoid this.
# AUTHOR
#   Andy Neff
#***
function dynamic_set_a()
{
  local __element_array_target_d="${1}"
  shift 1
  for (( i=0; $#; i++ )); do
    read -r "${__element_array_target_d}[$i]" <<< "${1}"
    shift 1
  done
}

#****f* elements.bsh/clear_a
# NAME
#   clear_a - Slightly safer indirect clear array
# INPUTS
#   $1 - Name of array to be cleared
# OUTPUT
#   Returns 1 on invalid variable name
# NOTES
#   Still uses eval, but makes sure the variable name appears valid
# AUTHOR
#   Andy Neff
#***
function clear_a()
{
  # https://stackoverflow.com/a/2821201/4166604
  if [[ ! ${1} =~ [a-zA-Z_]+[a-zA-Z0-9_]* ]]; then
    return 1
  fi
  eval "${1}=()"
}

#****f* elements.bsh/remove_element_a
# NAME
#   remove_element_a - Removes all instances of a value from an array
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be removes
# EXAMPLE
#   x=(11 22 33 22 44)
#   remove_element_a x 22
#   # declare -a x='([0]="11" [1]="33" [2]="44")'
# NOTES
#   The resulting array is sequentially indexed, which is not typical in
#   ba"s{h}" when removing elements from an array
# AUTHOR
#   Andy Neff
#***
function remove_element_a()
{
  local __element_array_target_a=()

  if [ "${!1+set}" == "set" ]; then
    local target=${1}[@]
    __element_array_target_a=( ${!target} )
    unset target
  else #If it's empty/does not exist, there is nothing to remove
    return 0
  fi
  local i

  for i in "${!__element_array_target_a[@]}"; do
    if [ "${__element_array_target_a[$i]}" == "${2}" ]; then
      #http://wiki.bash-hackers.org/syntax/arrays#destruction
      unset "__element_array_target_a[$i]"
    fi
  done

  # Do NOT use unset here. If you do that, you will lose "local" status. if the
  # variable that $1 points to has it. This can have MANY unintended
  # consequences which is generally BAD! Gotta eval :(
  # http://stackoverflow.com/questions/10497425/is-it-possible-to-use-array-in-bash#comment74842477_10497539
  eval "${1}=()"

  # You can't use ${t+"${t[@]}"} notation when there is a chance that the first
  # element of an array has been unset. This will falsely trigger ${t} as not
  # existing because ${t} REALLY means ${t[0]} which doesn't exist, but the rest
  # of ${t[@]} DOES! Solution is to disable set -u if it's set, and then
  # re-enable it if and only if it was set before all this. set_flags contains
  # this logic. t is __element_array_target_a
  unset_flag u
  dynamic_set_a "${1}" "${__element_array_target_a[@]}"
  reset_flag u
}

#****f* elements.bsh/remove_element
# NAME
#   remove_element - String version of remove_element_a
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be removes
#   [IFS] - IFS Separator used
# AUTHOR
#   Andy Neff
#***
function remove_element()
{
  local target="${1}"
  local __element_array_target_s=()
  if [ "${!target+set}" == "set" ]; then
    __element_array_target_s=( ${!target} )
  fi
  remove_element_a __element_array_target_s "${2}"
  export $target=${__element_array_target_s+"${__element_array_target_s[*]}"}
}

#****f* elements.bsh/add_element_post_a
# NAME
#   add_element_post_a - Add a value to the end of an array
# SYNOPSIS
#   Removes all copies of the value from the array first, and then appends to
#   the end of the array
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be appended
# EXAMPLE
#   x=(22 11 22 33)
#   add_element_post_a x 22
#   declare -p x
#   # declare -a x='([0]="11" [1]="33" [2]="22")'
# NOTES
#   The resulting array is sequentially indexed
# AUTHOR
#   Andy Neff
#***
function add_element_post_a()
{
  remove_element_a "${1}" "${2}"
  local target="${1}[@]"
  local __element_array_target_a=()
  if [ "${!1+set}" == "set" ]; then
    __element_array_target_a=( ${!target} )
  fi
  dynamic_set_a "${1}" ${__element_array_target_a+"${__element_array_target_a[@]}"} "${2}"
}

#****f* elements.bsh/add_element_post
# NAME
#   add_element_post - String version of add_element_post_a
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be appended
#   [IFS] - IFS Separator used
# AUTHOR
#   Andy Neff
#***
function add_element_post ()
{
  local target="${1}"
  local __element_array_target_s=()
  if [ "${!target+set}" == "set" ]; then
    __element_array_target_s=( ${!target} )
  fi
  add_element_post_a __element_array_target_s "${2}"
  export $target=${__element_array_target_s+"${__element_array_target_s[*]}"}
}

#****f* elements.bsh/add_element_pre_a
# NAME
#   add_element_pre_a - Add a value to the beginning of an array
# SYNOPSIS
#   Removes all copies of the value from the array first, and then prepends to
#   the beginning of the array
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be prepended
# EXAMPLE
#   x=(11 22 33 22)
#   add_element_pre_a x 22
#   declare -p x
#   # declare -a x='([0]="22" [1]="11" [2]="33")'
# NOTES
#   The resulting array is sequentially indexed
# AUTHOR
#   Andy Neff
#***
function add_element_pre_a()
{
  remove_element_a "${1}" "${2}"
  local target="${1}[@]"
  local __element_array_target_a=()
  if [ "${!1+set}" == "set" ]; then
    __element_array_target_a=( ${!target} )
  fi
  dynamic_set_a "${1}" "${2}" ${__element_array_target_a+"${__element_array_target_a[@]}"}
}

#****f* elements.bsh/add_element_pre
# NAME
#   add_element_pre - String version of add_element_post_a
# INPUTS
#   $1 - Name of array to be set
#   $2 - Value to be appended
#   [IFS] - IFS Separator used
# AUTHOR
#   Andy Neff
#***
function add_element_pre ()
{
  local target="${1}"
  local __element_array_target_s=()
  if [ "${!target+set}" == "set" ]; then
    __element_array_target_s=( ${!target} )
  fi
  add_element_pre_a __element_array_target_s "${2}"
  export $target=${__element_array_target_s+"${__element_array_target_s[*]}"}
}

#****f* elements.bsh/cmp_elements_a
# NAME
#   cmp_elements_a - Checks if two arrays are the same
# INPUTS
#   $1 - First array name
#   $2 - Second array name
# OUTPUT
#   Return value
#     0 - Identical
#     1 - Not identical
# AUTHOR
#   Andy Neff
#***
function cmp_elements_a()
{
  local x
  local __element_array_target_a
  local __element_array_target_a2

  # Have to copy https://unix.stackexchange.com/a/374094/123413 Thanks darwin!
  x="${1}[@]"
  __element_array_target_a=(${!1+"${!x}"})
  x="${2}[@]"
  __element_array_target_a2=(${!2+"${!x}"})

  if [ ${#__element_array_target_a[@]} -ne ${#__element_array_target_a2[@]} ]; then
    return 1
  fi

  for ((x=0; x<${#__element_array_target_a[@]}; x++)); do
    if [ "${__element_array_target_a[$x]}" != "${__element_array_target_a2[$x]}" ]; then
      return 1
    fi
  done

  return 0
}

#****f* elements.bsh/cmp_elements
# NAME
#   cmp_elements - String version of cmp_elements_a
# INPUTS
#   $1 - First string name
#   $2 - Second string name
# OUTPUT
#   Return value
#     0 - Identical
#     1 - Not identical
# AUTHOR
#   Andy Neff
#***
function cmp_elements()
{
  local __element_array_target_s=()
  local __element_array_target_s2=()
  local target

  target="${1}"
  __element_array_target_s=( ${!target} )
  target="${2}"
  __element_array_target_s2=( ${!target} )

  cmp_elements_a __element_array_target_s __element_array_target_s2
  return $?
}

#****f* elements.bsh/split_s
# INPUTS
#   $1 - Target array name
#   $2... - Strings
#   MIFS - A Multichararater Internal Field Separator. Default: //
# AUTHOR
#   https://stackoverflow.com/a/47633817/4166604
#***
function split_s()
{
  local target="${1}"
  shift 1

  local __element_array_target_a=()
  local bit
  local MIFS="${MIFS-//}"

  for bit in ${@+"${@}"}; do
    bit+=${MIFS}
    while [ -n "${bit}" ]; do
      __element_array_target_a+=( "${bit%%${MIFS}*}" )
      bit="${bit#*${MIFS}}"
    done
  done

  dynamic_set_a "${target}" ${__element_array_target_a+"${__element_array_target_a[@]}"}
}

function join_a()
{
  if [ $# -eq 1 ]; then
    return 0
    # This means target is never set. This mirrors the behavior of split_s
    # Note: I do not "unset $1" for the same locality is lost bug
  fi

  local target="$1"
  shift 1

  local bit
  local MIFS="${MIFS-//}"

  local __element_array_target_s="${1-}"
  shift 1

  while [ $# -gt 0 ]; do
    __element_array_target_s+="${MIFS}${1}"
    shift 1
  done

  export "${target}=${__element_array_target_s-}"
}